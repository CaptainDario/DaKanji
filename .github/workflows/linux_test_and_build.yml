# This is a basic workflow to help you get started with Actions

name: Ubuntu - Test and Build

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      upload_to_stores:
        description: "Should the build packages be uploaded to stores"
        type       : choice
        required   : true
        default    : "no"
        options    :
        - no
        - beta
      upload_to_gh:
        description: "Should the build packages be uploaded to a github release"
        type       : boolean
        required   : true
        default    : false
  # allows that other workflows can run this one
  workflow_call:
    #secrets:
    inputs:
      upload_to_stores:
        description: "Should the build packages be uploaded to stores"
        type       : string 
        required   : true
      upload_to_gh :
        description: "Should the build packages be uploaded to a github release"
        type       : boolean
        required   : true

#env:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # get versions from pubspec
      - name: set env variables
        run: |
          python3 ./.github/workflows/building.py set_env_flutter_version
          python3 ./.github/workflows/building.py set_env_dakanji_version

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: stable
          
      - name: Restore packages
        run: flutter pub get
        
      # download all files necessary to run dakanji
      - name: setup dakanji
        run: python3 setup.py
        
      - name: install build packages
        run: |
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv

      # TESTS  
      #- name: Analyze
      #  run: flutter analyze

      #- name: Run integration tests
      #  run: python3 ./integration_test/run_tests.py

      # build portable linux
      - name: build linux executable
        run: flutter build linux --release
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DaKanji_${{env.DAKANJI_VERSION}}_ubuntu_22_04.zip
          path: build/linux/x64/release/bundle

      # upload portable to gh release
      - name: upload to GH release
        if: ${{env.upload_to_gh}} == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          zip -r DaKanji_${{env.DAKANJI_VERSION}}_ubuntu_22_04.zip build/linux/x64/release/bundle
          gh release upload gh_action DaKanji_${{env.DAKANJI_VERSION}}_ubuntu_22_04.zip --clobber

      # TODO build flatpak
      # TODO upload flatpak to GH release

      # build SNAP
      - name: prepare snap building
        run: |
          python3 ./.github/workflows/building.py update_snapcraft_yaml
          flutter clean
          flutter pub get
      - name: Install Snapcraft and build snap
        uses: snapcore/action-build@v1
        id: snapcraft
      - uses: actions/upload-artifact@v3
        with:
          name: DaKanji_${{env.DAKANJI_VERSION}}_snap.zip
          path: ${{ steps.snapcraft.outputs.snap }}

      # upoad snap to gh release
      - name: upload to GH release
        if: ${{env.upload_to_gh}} == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload gh_action DaKanji_${{env.DAKANJI_VERSION}}_snap.zip --clobber

      # upload to snap store
      - uses: snapcore/action-publish@v1
        if  : ${{env.upload_to_stores}} != "no" 
        env :
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap   : ${{ steps.snapcraft.outputs.snap }}
          release: ${{env.upload_to_stores}}
