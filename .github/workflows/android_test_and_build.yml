# This is a basic workflow to help you get started with Actions

name: Android - Test and Build

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # allows that other workflows can run this one
  workflow_call:

env:
  JAVA_VERSION: "11.x"
  FLUTTER_VERSION: "2.10.0"
  FLUTTER_CHANNEL: "stable"
  PROPERTIES_PATH: "./android/key.properties"
  JKS_PATH: "../../keys/DaKanjiRecognizer.jks"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Java to compile Android project
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: ${{env.FLUTTER_CHANNEL}}
          
      - name: Restore packages
        run: |
          flutter pub get
          ./install.bat -d
        
      # download all TF lite files from the DaKanji-ML repo
      - name: Download release asset
        uses: robinraju/release-downloader@v1.3
        with:
          repository: CaptainDario/DaKanji-ML
          latest: true
          fileName: "*"
          token: ${{ secrets.DA_KANJI_ML_RELEASES_TOKEN }}
          out-file-path: "assets/tflite_models"
        
      #- name: Analyze
      #  run: flutter analyze

      #- name: Run integration tests
      #  run: flutter test .\integration_test\ -d windows

      # Creating the key.properties file
      - run: |
          echo keyPassword=\${{ secrets.KEY_STORE }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.KEY_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ secrets.KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
          echo storeFile=\${{env.JKS_PATH}} >> ${{env.PROPERTIES_PATH}}
      # Decoding base64 key into a file
      - run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{env.JKS_PATH}}

      - name: build apks for different architectures
        run: flutter build apk --split-per-abi

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DaKanji_android.zip
          path: build/app/outputs/flutter-apk/

      - name: build app bundle
        run: flutter build appbundle
