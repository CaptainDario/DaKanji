from typing import List

from setup import get_asset_info, get_release_url

not_initial_setup_files = ["audios.zip"]


def write_asset_sizes_to_file(names : List[str], sizes : List[int]):
    """ Gets all asset sizes from the latest Github release and writes them as
    variables to `./lib/asset_sizes.dart`.
    """

    with open("lib/asset_sizes.dart", mode="w+") as f:

        # ignore naming scheme
        f.write("// ignore_for_file: non_constant_identifier_names, constant_identifier_names\n\n")

        # add informative header
        f.write("// THIS FILE IS AUTOMATICALLY GENERATED\n")
        f.write("// DO NOT EDIT MANUALLY\n\n")

        # write the data
        var_names = []
        for name, size in zip(names, sizes):

            # individually
            if(name.endswith(".zip")):
                var_name = f"c_{name[:-4].upper()}_SIZE_MB"
                f.write(f"const double {var_name} = {((size/1024)/1024):.1f};\n")

                if(name not in not_initial_setup_files):
                    var_names.append(var_name)

        # one list that contains all sizes
        f.write("\n")
        names = ',\n\t'.join(var_names)
        f.write(f"const List<double> g_DaKanjiAssetSizes = [\n\t{names}\n];\n\n")

        # total size
        f.write("/// Total size of all assets in MB\n")
        f.write("final double c_INITIAL_DOWNLOAD_SIZE = g_DaKanjiAssetSizes.reduce((v1, v2) => v1 + v2);\n")


if __name__ == "__main__":

    asset_names, _, asset_sizes = get_asset_info(get_release_url())

    write_asset_sizes_to_file(asset_names, asset_sizes)